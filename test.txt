Ex -1 Image enhancementCode:

a=imread('cameraman.tif');
imshow(a);
subplot(1,3,1),imshow(a);
title('Original image');
b=imadjust(a);
subplot(1,3,2),imshow(b),title('Enhanced image');
c=255-a;
subplot(1,3,3),imshow(c),title('Negative Image');
Output:


Ex - 2 Histogram equalizationCode:

i=imread('pout.tif');
j=histeq(i);
k=adapthisteq(i);
subplot(3,2,1),imshow(i),title('Original Image');
subplot(3,2,2),imhist(i),title('Histogram of Original Image');
subplot(3,2,3),imshow(j),title('Equalised Image');
subplot(3,2,4),imhist(j),title('Histogram of Equalised Image');
subplot(3,2,5),imshow(k),title('Adaptive Equalised Image');
subplot(3,2,6),imhist(k),title('Adaptive Histogram Image');
Output:
Ex - 3 RestorationCode:

i=imread('trees.tif');
a=imnoise(i,'gaussian',0.02);
b=medfilt2(a);
c=ordfilt2(a,9,true(3));
d=imnoise(i,'poisson');
e=medfilt2(d);
f=ordfilt2(d,9,true(3));
g=imnoise(i,'salt & pepper');
h=medfilt2(g);
i=ordfilt2(g,25,true(5));
j=imnoise(i,'speckle');k=medfilt2(j);
l=ordfilt2(j,25,true(5));
figure;
subplot(3,4,1),imshow(a),title('Gaussian');
subplot(3,4,2),imshow(d),title('Poisson');
subplot(3,4,3),imshow(g),title('Salt & Pepper');
subplot(3,4,4),imshow(j),title('Speckle');
subplot(3,4,5),imshow(b),title('Result Of Median Filter: ');
subplot(3,4,6),imshow(e);
subplot(3,4,7),imshow(h);
subplot(3,4,8),imshow(k);
subplot(3,4,9),imshow(c),title('Result Of Order Filter: ');
subplot(3,4,10),imshow(f);
subplot(3,4,11),imshow(i);
subplot(3,4,12),imshow(l);
Output:
Ex - 4Code:

a=imread('moon.tif');
b=imnoise(a,'gaussian',0.05);
figure;
subplot(3,2,1),imshow(a),title('Original Image');
subplot(3,2,2),imshow(b),title('Noisy Image');
i=1/9*ones(3,3);
c=conv2(b,i);
subplot(3,2,3),imshow(uint8(c)),title('Smoothing Filter Output');
f=wiener2(b);
subplot(3,2,4),imshow(f),title('Wiener Filtered Image');
h=fspecial('unsharp');
g=imfilter(a,h);
subplot(3,2,5),imshow(g),title('Fspecial Unsharp Filter');
imadjust(g);
j=fspecial('motion',20,40);
k=imfilter(a,j);
subplot(3,2,6),imshow(k),title('Fspecial Motion Filter');
imadjust(k);
Output:
Ex-5 Edge DetectionCode:

I =imread('https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSbsl6QDlOR2BcdSZ8b7-Mc1ix53Boa_qWfFQ&usqp=CAU');
J = rgb2gray(I);
figure;
subplot(3,3,1),imshow(J),title('Gray Scale Image');
n=edge(J,'Sobel');
subplot(3,3,2),imshow(n),title('Sobel');
k=edge(J,'Prewitt');
subplot(3,3,3),imshow(k),title('Prewitt');
l=edge(J,'Roberts');
subplot(3,3,4),imshow(l),title('Roberts');
m=edge(J,'log');
subplot(3,3,5),imshow(m),title('Log');
o=edge(J,'zerocross');
subplot(3,3,6),imshow(o),title('zerocross');
p=edge(J,'Canny');
subplot(3,3,7),imshow(p),title('Canny');
Output:

Ex-7 Image SubtractionCode:

a)i=imread('cameraman.tif');
blocks=blkproc(i,[40 40],'min(x(:))');
background=imresize(blocks,[256 256]);
j=imsubtract(i,background);
l=imsubtract(i,150);
k=imsubtract(i,60);
figuresubplot(3,2,1),imshow(i),title('Original image');
subplot(3,2,2),imshow(blocks),title('blocks image');
subplot(3,2,3),imshow(background),title('Background image');
subplot(3,2,4),imshow(j),title('Background Subtracted image');
subplot(3,2,5),imshow(l),title('Value Subtracted image');
subplot(3,2,6),imshow(k),title('Value Subtracted image');
b)i=imread('cameraman.tif');
fun=inline('std2(s)*ones(size(x))');
i2=blkproc(i,[8 8],'std2(x)*ones(size(x))');
figuresubplot(1,2,1),imshow(i),title('Original Image');
subplot(1,2,2),imshow(i2,[]),title('Subtracted Image);
c)a= imread('AT3_1m4_02.tif');
b= imread('AT3_1m4_01.tif');
c=imsubtract(a,b);
figuresubplot(2,2,1),imshow(a),title(‘Original Image -1’)subplot(2,2,2),imshow(b),title('Original Image -1')subplot(2,2,3),imshow(c),title('Subtracted Image')Output:

Ex-8 Boundary DetectedCode:

a=imread('pears.png');
c=rgb2gray(a);
c(c>255)=0;
d=~im2bw(c);
s=strel('disk',2,0);
f=imerode(d,s);
figure;
subplot(3,3,1),imshow(a),title('Original Image');
subplot(3,3,2),imshow(d),title('Binary Image');
subplot(3,3,3),imshow(d-f),title('Boundary subtracted Image');
s=strel('square',20);
f=imerode(a,s);
subplot(3,3,4),imshow(a-f),title('Square- Boundary subtracted Image');
s=strel('disk',2,0);
f=imerode(a,s);
subplot(3,3,5),imshow(a-f),title('Disk - Boundary subtracted Image');
s=strel('line',12,40);
f=imerode(a,s);
subplot(3,3,6),imshow(a-f),title('Line - Boundary subtracted Image');
s=strel('diamond',12);
f=imerode(a,s);
subplot(3,3,7),imshow(a-f),title('Diamond - Boundary subtracted Image');
s=strel('rectangle',[10,12]);
f=imerode(a,s);
subplot(3,3,8),imshow(a-f),title('Rectangle - Boundary subtracted Image');
Output:
Ex-9 Image segmentationCode:

a)

k=imread('mri.tif');
imtool(k,[]);
k1=im2bw(k,graythresh(k));
imtool(k1);
se=strel('disk',7,4);
k2=imopen(k1,se);
imtool(k2);
b=bwlabel(k2);
imtool(b,[]);
b(b~=9)=0;
imtool(b);
k3=imclose(b,strel('disk',18));
imtool(k3);
k4=k3.*double(k);
imtool(k4,[]);

b)

i=imread('mri.tif');
i1=imtophat(i,strel('disk',10));
figure;
subplot(3,3,1),imshow(i1),title('Top-hat filtering');
i2=imadjust(i1);
subplot(3,3,2),imshow(i2),title('Contrasted Image');
leavel=graythresh(i2);
bw=im2bw(i2,leavel);
subplot(3,3,3),imshow(bw),title('Binary Image');
c=~bw;
subplot(3,3,4),imshow(c),title('Invert Binary Image');
d=~bwdist(c);
d(c)=~inf;
l=watershed(d);
subplot(3,3,5),imshow(l),title('Background');
wi=label2rgb(l,'hot','W');
subplot(3,3,6),imshow(wi),title('Background');
im=i;
im(i==0)=0;
subplot(3,3,7),imshow(im),title('Final');

c)

x=imread('rice.png');
imshow(x);
title('Original grayscale image');
figure;
x=im2double(x);
d=im2bw(x);
imshow(d);
title('Global thresholding using MATLAB');
Id=x;
T=0.5*(min(min(Id))+max(max(Id(:))));
deltaT=0.001;
figure;
d=im2bw(x,T);
imshow(d);
title('Global Thresholding using own code');

d)

fontSize=10;
location='/MATLAB Drive/new';
%folder in which your images existsds=imageDatastore(location,'FileExtensions',[".jpg",".tif",".png"]);
%createdatastore for all images in your foldernew_folder='/MATLAB Drive/new folder';
%new folderk=1;
while hasdata(ds)img=read(ds);
%read image from datastorescale=imresize(img,[256 256]);
fileName=sprintf('image_%d.jpg',k);
fullFileName=fullfile(new_folder,fileName);
imwrite(scale,fullFileName);
%size(scale)k=k+1;
%lab conversionlabImage = rgb2lab(scale);
ab = labImage(:,:,2:3);
ab = im2single(ab);
%segmentationnColors = 3;
%repeat the clustering 3 times to avoid local minimapixel_labels = imsegkmeans(ab,nColors,'NumAttempts',3);
%imshow(pixel_labels,[])%title('Image labeled by cluster Index');
figure;
subplot(1,4,1)imshow(scale);
title('leaf image');
mask1 = pixel_labels==1;
cluster1 = scale .* uint8(mask1);
subplot(1,4,2);
imshow(cluster1);
title('objects in cluster1');
mask2 = pixel_labels==2;
cluster2 = scale .* uint8(mask2);
subplot(1,4,3);
imshow(cluster2);
title('objects in cluster2');
mask3 = pixel_labels==3;
cluster3 = scale .* uint8(mask3);
subplot(1,4,4);
imshow(cluster3);
title('objects in cluster3');
end
Output:

Ex-6

f1=@(block_struct)dct2(block_struct.data);
f2=@(block_struct)dct2(block_struct.data);
im=imread('coins.png');
imwrite(im,'new.tif');
subplot(1,2,1);
imshow(im),title('Original Image');
j=blockproc(im,[8 8],f1);
depth=find(abs(j)<150);
j(depth)=zeros(size(depth));
k=blockproc(j,[8 8],f2)/255;
subplot(1,2,2);
imshow(k),title('Compressed Image');
imwrite(k,'new.tif');
compression_ratio=numel(j)/numel(depth);

